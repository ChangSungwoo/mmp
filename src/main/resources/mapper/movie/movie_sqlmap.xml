<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="movie">
	
	<resultMap type="com.mymovieprice.mmp.movie.model.MovieMaster" id="MovieMaster">
		<result column="MOVIE_ID"	property="movieId"/>
		<result column="MOVIE_KOR_TITLE"	property="movieKorTitle"/>
		<result column="MOVIE_ENG_TITLE"	property="movieEngTitle"/>
		<result column="RELEASE_DT"	property="releaseDt"/>
		<result column="DISPLAY_YN"	property="displayYn"/>
		<result column="END_YN"	property="endYn"/>
		<result column="CRE_DT"	property="creDt"/>
		<result column="CRE_ID"	property="creId"/>
		<result column="UPD_DT"	property="updDt"/>
		<result column="UPD_ID"	property="updId"/>
	</resultMap>
	
	<resultMap type="com.mymovieprice.mmp.movie.model.MoviePrice" id="MoviePriceList">
		<result column="MOVIE_PRICE_SEQ"	property="moviePriceSeq"/>
		<result column="PRICE_COMMENT"	property="priceComment"/>
		<result column="PRICE"	property="price"/>
		
	</resultMap>
	
	<select id="selectMovieMaster" parameterType="hashmap" resultMap="MovieMaster">
		select 
		MOVIE_ID as movieId,
		MOVIE_KOR_TITLE as movieKorTitle,
		MOVIE_ENG_TITLE as movieEngTitle,
		RELEASE_DT as releaseDt,
		DISPLAY_YN as displayYn,
		END_YN as endYn,
		CRE_DT as creDt,
		CRE_ID as creId,
		UPD_DT as updDt,
		UPD_ID as updId
		from MOVIE_MASTER
		where MOVIE_ID = #{movieId}
	</select>

	<select id="selectMovieMasterList" parameterType="hashmap" resultType="hashmap">
		select 
		MOVIE_ID as movieId,
		MOVIE_KOR_TITLE as movieKorTitle,
		MOVIE_ENG_TITLE as movieEngTitle,
		RELEASE_DT as releaseDt,
		DISPLAY_YN as displayYn,
		END_YN as endYn,
		CRE_DT as creDt,
		CRE_ID as creId,
		UPD_DT as updDt,
		UPD_ID as updId
		from MOVIE_MASTER
		order by CRE_DT DESC;
	</select>
	
	<select id="selectMovieListByEditor" parameterType="hashmap" resultType="hashmap">
		select A.MOVIE_ID as movieId
		, C.FILE_NM as imgFileNm
		, C.FILE_PATH as imgFilePath
		, A.MOVIE_KOR_TITLE as movieKorTitle
		, A.MOVIE_ENG_TITLE as movieEngTitle
		, ifnull(CAST(B.CODE_D_NM as UNSIGNED)+sum(A.PRICE) , 0) as price
		, (SELECT sum(price) from MOVIE_PRICE mp1 where mp1.MOVIE_ID = A.MOVIE_ID and mp1.PRICE_DIV = 'P') as positivePrice
		, (SELECT sum(price) from MOVIE_PRICE mp2 where mp2.MOVIE_ID = A.MOVIE_ID and mp2.PRICE_DIV = 'N') as negativePrice
		, max(A.UPD_DT) as updDt
		, A.CRE_DT as creDt
		, A.RELEASE_DT as releaseDt
		from (
			select mm.MOVIE_ID
			, mm.MOVIE_KOR_TITLE
			, mm.MOVIE_ENG_TITLE
			, case mp.PRICE_DIV when 'N' then mp.PRICE*-1 else mp.PRICE end PRICE
			, mp.PRICE_DIV
			, mm.STD_PRICE_DIV
			, mm.DISPLAY_YN
			, mp.UPD_DT
			, mm.CRE_DT
			, mm.RELEASE_DT
			from MOVIE_MASTER mm 
			left outer join MOVIE_PRICE mp
			on mm.MOVIE_ID = mp.MOVIE_ID 
			and mm.DISPLAY_YN = 'Y'
		) A , CMM_CODE_D B , MOVIE_IMAGE C
		where A.STD_PRICE_DIV = B.CODE_D_SEQ
		and A.DISPLAY_YN = 'Y'
		and A.MOVIE_ID = C.MOVIE_ID
		and C.DELEGATE_YN = 'Y'
		group by A.MOVIE_ID, A.MOVIE_KOR_TITLE;
	</select>
	
	<insert id="insertMovieMaster" parameterType="com.mymovieprice.mmp.movie.model.MovieMaster">
		insert into MOVIE_MASTER(
			MOVIE_KOR_TITLE, 
			MOVIE_ENG_TITLE,
			RELEASE_DT,
			END_YN,
			DISPLAY_YN,
			CRE_ID,
			CRE_DT, 
			UPD_ID
			) VALUES (
			#{movieKorTitle},
			#{movieEngTitle},
			#{releaseDt},
			#{endYn},
			#{displayYn},
			#{creId},
			NOW(),
			#{updId}
			);
	</insert>

	<select id="selectOneMovieImageList" parameterType="hashmap" resultType="hashmap">
			select 
			MOVIE_ID as movieId,
			IMAGE_SEQ as imageSeq,
			IMAGE_DIV as imageDiv,
			FILE_PATH as filePath,
			FILE_NM as fileNm,
			IMAGE_DESC as imageDesc,
			USE_YN as useYn,
			DELEGATE_YN delegateYn,
			CRE_DT as creDt,
			CRE_ID  as creId,
			UPD_DT as updDt,
			UPD_ID as updId 
			from MOVIE_IMAGE
			where MOVIE_ID = #{movieId}
			;
	</select>
	
	<select id="selectMovieImage" parameterType="hashmap" resultType="hashmap">
			SELECT 
				mm.MOVIE_ID as movieId, 
				mm.MOVIE_KOR_TITLE as movieKorTitle, 
				mi.FILE_PATH as filePath,
				mi.FILE_NM as fileNm,
				(SELECT count(*) FROM MOVIE_IMAGE smi WHERE smi.MOVIE_ID = mm.MOVIE_ID) as imageCnt
			FROM MOVIE_MASTER mm LEFT OUTER JOIN MOVIE_IMAGE mi
			ON mm.MOVIE_ID = mi.MOVIE_ID 
			AND mi.DELEGATE_YN = 'Y'
			ORDER BY mm.CRE_DT DESC;
	</select>
	
	<insert id="insertMovieImage" parameterType="com.mymovieprice.mmp.movie.model.MovieImage">
		insert into MOVIE_IMAGE(
			MOVIE_ID, 
			IMAGE_DIV,
			FILE_NM,
			FILE_PATH,
			IMAGE_DESC,
			USE_YN,
			DELEGATE_YN,
			CRE_ID,
			CRE_DT, 
			UPD_ID
			) VALUES (
			#{movieId},
			#{imageDiv},
			#{fileNm},
			#{filePath},
			#{imageDesc},
			#{useYn},
			#{delegateYn},
			#{creId},
			NOW(),
			#{updId}
			);
	</insert>
	
	<update id="updateMovieImage" parameterType="com.mymovieprice.mmp.movie.model.MovieImage">
		update MOVIE_IMAGE
		SET USE_YN = #{useYn}
		, DELEGATE_YN = #{delegateYn}
		, IMAGE_DESC = #{imageDesc}
		, UPD_ID = #{updId}
		where MOVIE_ID = #{movieId}
		and IMAGE_SEQ = #{imageSeq};
	</update>
	
	<update id="delegateImgDisable" parameterType="com.mymovieprice.mmp.movie.model.MovieImage">
		update MOVIE_IMAGE
		SET DELEGATE_YN = 'N'
		, UPD_ID = #{updId}
		where MOVIE_ID = #{movieId};
	</update>
	
	<select id="selectMoviePriceList" parameterType="hashmap" resultType="hashmap">
		select A.MOVIE_ID as movieId
		, A.MOVIE_KOR_TITLE as movieKorTitle
		, A.MOVIE_ENG_TITLE as movieEngTitle
		, ifnull(CAST(B.CODE_D_NM as UNSIGNED)+sum(A.PRICE) , 0) as price
		, max(A.UPD_DT) as updDt
		, A.CRE_DT as creDt
		from (
			select mm.MOVIE_ID
			, mm.MOVIE_KOR_TITLE
			, mm.MOVIE_ENG_TITLE
			, case mp.PRICE_DIV when 'N' then mp.PRICE*-1 else mp.PRICE end PRICE
			, mp.PRICE_DIV
			, mm.STD_PRICE_DIV
			, mp.UPD_DT
			, mm.CRE_DT
			from MOVIE_MASTER mm 
			left outer join MOVIE_PRICE mp
			on mm.MOVIE_ID = mp.MOVIE_ID 
			and mm.DISPLAY_YN = 'Y'
		) A , CMM_CODE_D B
		where A.STD_PRICE_DIV = B.CODE_D_SEQ
		group by A.MOVIE_ID, A.MOVIE_KOR_TITLE;
	</select>
	
	<insert id="insertMoviePrice" parameterType="com.mymovieprice.mmp.movie.model.MoviePrice">
		insert into MOVIE_PRICE(
			MOVIE_ID, 
			PRICE_DIV,
			PRICE_COMMENT,
			PRICE,
			WRITER_DIV,
			CRE_ID,
			CRE_DT, 
			UPD_ID
			) VALUES (
			#{movieId},
			#{priceDiv},
			#{priceComment},
			#{price},
			#{writerDiv},
			#{creId},
			NOW(),
			#{updId}
			);
	</insert>
	
	
	<select id="selectOneMoviePrice" parameterType="com.mymovieprice.mmp.movie.model.MoviePriceCondition" resultMap="MoviePriceList">
			select 
			MOVIE_PRICE_SEQ as moviePriceSeq,
			PRICE_COMMENT as priceComment,
			PRICE as price
			from MOVIE_PRICE
			where MOVIE_ID = #{movieId}
			and PRICE_DIV = #{priceDiv}
			;
	</select>
</mapper>